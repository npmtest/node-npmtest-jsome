{"/home/travis/build/npmtest/node-npmtest-jsome/test.js":"/* istanbul instrument in package npmtest_jsome */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jsome/lib.npmtest_jsome.js":"/* istanbul instrument in package npmtest_jsome */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_jsome = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_jsome = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-jsome/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-jsome && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_jsome */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_jsome\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_jsome.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_jsome.rollup.js'] =\n            local.assetsDict['/assets.npmtest_jsome.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_jsome.__dirname +\n                    '/lib.npmtest_jsome.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jsome/node_modules/jsome/script.js":"var colors = {\n    'num'   : 'cyan'\n  , 'str'   : 'magenta'\n  , 'bool'  : 'red'\n  , 'regex' : 'blue'\n  , 'undef' : 'grey'\n  , 'null'  : 'grey'\n  , 'attr'  : 'green'\n  , 'quot'  : 'yellow'\n  , 'punc'  : 'yellow'\n  , 'brack' : 'yellow'\n}\n\n, level = {\n    'show'    : false\n  , 'char'    : '.'\n  , 'color'   : 'red'\n  , 'spaces'  : 2\n  , 'start'   : 0\n}\n\n, params = {\n    'colored' : true\n  , 'async'   : false\n}\n\n\nmodule.exports = (function () {\n\n  function jsome (json, callBack) {\n    return jsome.parse(stringify(json), callBack);\n  }\n\n  jsome.colors  = colors;\n  jsome.level   = level;\n  jsome.params  = params;\n\n  var generator = require(\"./lib/generator\").setJsomeRef(jsome)\n    , stringify = require('json-stringify-safe');\n\n  jsome.parse = function (jsonString, callBack) {\n    var json = JSON.parse(jsonString);\n\n    if (!jsome.params.async) {\n      var output = generator.gen(json, jsome.level.start);\n      if(Array.isArray(output)) {\n        console.log.apply(console, output);\n      } else {\n        console.log(output);\n      }\n    } else {\n      setTimeout(function () {\n        console.log(generator.gen(json, jsome.level.start));\n        callBack && callBack();\n      });\n    }\n\n    return json;\n  }\n\n  jsome.getColoredString = function(jsonString, callBack){\n    var json = JSON.parse(stringify(jsonString));\n    if (!jsome.params.async) {\n      var output = generator.gen(json, jsome.level.start);\n      return output\n    } else {\n      setTimeout(function () {\n        var output = generator.gen(json, jsome.level.start)\n        callBack && callBack(output);\n      });\n    }\n  }\n\n\n  return jsome;\n\n})();\n","/home/travis/build/npmtest/node-npmtest-jsome/node_modules/jsome/lib/generator.js":"module.exports = (function () {\n  var jsomeRef\n    , browserColors = []\n    , browserStyle  = require('./browser-style')\n  \n  function getType (value) {\n    var map = {\n        '[object Number]'   : 'num'\n      , '[object String]'   : 'str'\n      , '[object Boolean]'  : 'bool'\n      , '[object RegExp]'   : 'regex'\n      , '[object Function]' : 'func'\n      , 'null'              : 'null'\n      , 'undefined'         : 'undef'\n    }\n\n    return map[toString.call(value)] || map[''+value];\n  }\n  \n  function isBrowser () {\n    return typeof window == 'object';\n  }\n  \n  function repeat (str, times) {\n    return Array(times ? (times+1) : 0).join(str);\n  }\n  \n  function cleanObject (obj) {\n    var lastKey = '';\n    for (var key in obj) {\n      (getType(obj[key])==='func') && delete obj[key] || (lastKey = key);\n    }\n    return lastKey;\n  }\n  \n  function cleanArray (arr) {\n    return arr.filter(function (item) {\n      return getType(item) !== 'func';\n    });\n  }\n  \n  function generateLevel (level) {\n    var levelStr  = repeat(' ', jsomeRef.level.spaces)\n      , opts      = jsomeRef.level;\n    \n    if (jsomeRef.level.show && levelStr.length) {\n      levelStr = levelStr.replace(' ', useColorProvider(opts.char, opts.color))\n    }\n    \n    return repeat(levelStr, level);\n  }\n  \n  function hasChild (obj) {\n    for (var key in obj) {\n      if (isArray(obj[key]) || isObject(obj[key])) return true;\n    }\n  }\n  \n  function isArray (arr) {\n    return toString.call(arr).match(/^\\[object Array\\]$/);\n  }\n  \n  function isObject (obj) {\n    return toString.call(obj).match(/^\\[object Object\\]$/);\n  }\n  \n  function colorify (value, level) {\n    var color = jsomeRef.colors[getType(value)];\n    return generateLevel(level) \n      + (getType(value) === 'str' ? colorifySpec('\"', 'quot') : '')\n      + useColorProvider('' + value, color)\n      + (getType(value) === 'str' ? colorifySpec('\"', 'quot') : '');\n  }\n  \n  function colorifySpec (char, type, level) {\n    return generateLevel(level) + useColorProvider('' + char, jsomeRef.colors[type]);\n  }\n  \n  function useColorProvider (str, color) {\n    if(isBrowser()) {\n      var style = (isArray(color) ? color : [color]).map(function (item) {\n        return browserStyle[item]\n      }).join(';');\n      browserColors.push(style);\n      return \"%c\" + str;\n    } else {\n      if (jsomeRef.params.colored) {\n        var chalk = require('chalk');\n        if (isArray(color)) {\n          if(color.length) {\n            return useColorProvider(chalk[color[0]](str), color.slice(1));\n          } else {\n            return str;\n          }\n        } else {\n          return chalk[color](str);\n        }\n      }\n    }\n    \n    return str;\n  }\n  \n  return {\n    gen : function (json, level, isChild) {\n      var colored = [];\n          level   = level || 0;\n      \n      if (isObject(json)) {\n        \n        var lastKey = cleanObject(json);\n        colored.push(colorifySpec('{', 'brack', isChild ? 0 : level)); \n        level++;\n        \n        for(var key in json) {\n          var result = colorifySpec(key, 'attr', level) \n             + colorifySpec(': ', 'punc') \n             + this.gen(json[key], level, true) \n             + (key !== lastKey ? colorifySpec(',', 'punc') : '');\n          colored.push(result);\n        }\n        \n        colored.push(colorifySpec('}', 'brack', --level));\n        \n      } else if (isArray(json)) {\n        json = cleanArray(json);\n        \n        if (hasChild(json)) {\n          \n          var result = json.map(function(item) {\n            return this.gen(item, level+1);\n          }.bind(this));\n          \n          colored.push(colorifySpec('[', 'brack', isChild ? 0 : level));;\n          colored.push(result.join(colorifySpec(', ', 'punc') + '\\n' ));\n          colored.push(colorifySpec(']', 'brack', level));\n          \n        } else {\n          \n          var coloredArray = colorifySpec('[', 'brack', isChild ? 0 : level);\n          for (var key in json) {\n            coloredArray += colorify(json[key]) + (json.length-1>key ? colorifySpec(', ', 'punc') : '');\n          }\n          colored.push(coloredArray + colorifySpec(']', 'brack'));\n          \n        }\n        \n      } else {\n        return generateLevel(isChild ? 0 : level) + colorify(json);\n      }\n      \n      return isBrowser() ? [colored.join('\\n')].concat(browserColors) : colored.join('\\n');\n    },\n    setJsomeRef : function (jsome) {\n      jsomeRef = jsome;\n      return this;\n    }\n  }\n  \n})();","/home/travis/build/npmtest/node-npmtest-jsome/node_modules/jsome/lib/browser-style.js":"module.exports = {\n    black     : 'color: #000000'\n  , red       : 'color: #FF0000'\n  , green     : 'color: #00FF00'\n  , yellow    : 'color: #FFFF00'\n  , blue      : 'color: #0000FF'\n  , magenta   : 'color: #FF00FF'\n  , cyan      : 'color: #00FFFF'\n  , white     : 'color: #FFFFFF'\n  , gray      : 'color: #C0C0C0'\n  , bgBlack   : 'background: #000000'\n  , bgRed     : 'background: #FF0000'\n  , bgGreen   : 'background: #00FF00'\n  , bgYellow  : 'background: #FFFF00'\n  , bgBlue    : 'background: #0000FF'\n  , bgMagenta : 'background: #FF00FF'\n  , bgCyan    : 'background: #00FFFF'\n  , bgWhite   : 'background: #000000'\n  , bgGray    : 'background: #C0C0C0'\n}"}